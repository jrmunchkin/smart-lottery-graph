// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimLotteryRewards extends ethereum.Event {
  get params(): ClaimLotteryRewards__Params {
    return new ClaimLotteryRewards__Params(this);
  }
}

export class ClaimLotteryRewards__Params {
  _event: ClaimLotteryRewards;

  constructor(event: ClaimLotteryRewards) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EmitTicket extends ethereum.Event {
  get params(): EmitTicket__Params {
    return new EmitTicket__Params(this);
  }
}

export class EmitTicket__Params {
  _event: EmitTicket;

  constructor(event: EmitTicket) {
    this._event = event;
  }

  get lotteryNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ticket(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class EnterLottery extends ethereum.Event {
  get params(): EnterLottery__Params {
    return new EnterLottery__Params(this);
  }
}

export class EnterLottery__Params {
  _event: EnterLottery;

  constructor(event: EnterLottery) {
    this._event = event;
  }

  get lotteryNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestLotteryWinningTicket extends ethereum.Event {
  get params(): RequestLotteryWinningTicket__Params {
    return new RequestLotteryWinningTicket__Params(this);
  }
}

export class RequestLotteryWinningTicket__Params {
  _event: RequestLotteryWinningTicket;

  constructor(event: RequestLotteryWinningTicket) {
    this._event = event;
  }

  get lotteryNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RevealTicket extends ethereum.Event {
  get params(): RevealTicket__Params {
    return new RevealTicket__Params(this);
  }
}

export class RevealTicket__Params {
  _event: RevealTicket;

  constructor(event: RevealTicket) {
    this._event = event;
  }

  get lotteryNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ticket(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get nbMatching(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StartLottery extends ethereum.Event {
  get params(): StartLottery__Params {
    return new StartLottery__Params(this);
  }
}

export class StartLottery__Params {
  _event: StartLottery;

  constructor(event: StartLottery) {
    this._event = event;
  }

  get lotteryNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WinningTicketLotteryPicked extends ethereum.Event {
  get params(): WinningTicketLotteryPicked__Params {
    return new WinningTicketLotteryPicked__Params(this);
  }
}

export class WinningTicketLotteryPicked__Params {
  _event: WinningTicketLotteryPicked;

  constructor(event: WinningTicketLotteryPicked) {
    this._event = event;
  }

  get lotteryNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ticket(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class SmartLotteryV2__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class SmartLotteryV2 extends ethereum.SmartContract {
  static bind(address: Address): SmartLotteryV2 {
    return new SmartLotteryV2("SmartLotteryV2", address);
  }

  checkUpkeep(param0: Bytes): SmartLotteryV2__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new SmartLotteryV2__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<SmartLotteryV2__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SmartLotteryV2__checkUpkeepResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  getActualLotteryBalance(): BigInt {
    let result = super.call(
      "getActualLotteryBalance",
      "getActualLotteryBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActualLotteryBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActualLotteryBalance",
      "getActualLotteryBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActualLotteryNumber(): BigInt {
    let result = super.call(
      "getActualLotteryNumber",
      "getActualLotteryNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActualLotteryNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActualLotteryNumber",
      "getActualLotteryNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInterval(): BigInt {
    let result = super.call("getInterval", "getInterval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getInterval", "getInterval():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLotteryBalance(_lotteryNumber: BigInt): BigInt {
    let result = super.call(
      "getLotteryBalance",
      "getLotteryBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lotteryNumber)]
    );

    return result[0].toBigInt();
  }

  try_getLotteryBalance(_lotteryNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLotteryBalance",
      "getLotteryBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lotteryNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLotteryState(): i32 {
    let result = super.call("getLotteryState", "getLotteryState():(uint8)", []);

    return result[0].toI32();
  }

  try_getLotteryState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getLotteryState",
      "getLotteryState():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getNumberOfCombination(_combination: string): BigInt {
    let result = super.call(
      "getNumberOfCombination",
      "getNumberOfCombination(string):(uint256)",
      [ethereum.Value.fromString(_combination)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfCombination(
    _combination: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfCombination",
      "getNumberOfCombination(string):(uint256)",
      [ethereum.Value.fromString(_combination)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfPlayers(): BigInt {
    let result = super.call(
      "getNumberOfPlayers",
      "getNumberOfPlayers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfPlayers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfPlayers",
      "getNumberOfPlayers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfTicketsByPlayer(_user: Address): BigInt {
    let result = super.call(
      "getNumberOfTicketsByPlayer",
      "getNumberOfTicketsByPlayer(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfTicketsByPlayer(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfTicketsByPlayer",
      "getNumberOfTicketsByPlayer(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayer(_index: BigInt): Address {
    let result = super.call("getPlayer", "getPlayer(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toAddress();
  }

  try_getPlayer(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getPlayer", "getPlayer(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPlayerTicket(_user: Address, _index: BigInt): Array<BigInt> {
    let result = super.call(
      "getPlayerTicket",
      "getPlayerTicket(address,uint256):(uint256[4])",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getPlayerTicket(
    _user: Address,
    _index: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlayerTicket",
      "getPlayerTicket(address,uint256):(uint256[4])",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPrizeDistribution(): Array<BigInt> {
    let result = super.call(
      "getPrizeDistribution",
      "getPrizeDistribution():(uint256[4])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getPrizeDistribution(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPrizeDistribution",
      "getPrizeDistribution():(uint256[4])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getStartTimestamp(): BigInt {
    let result = super.call(
      "getStartTimestamp",
      "getStartTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStartTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStartTimestamp",
      "getStartTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTicketFee(): BigInt {
    let result = super.call("getTicketFee", "getTicketFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTicketFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTicketFee", "getTicketFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUsdTicketFee(): BigInt {
    let result = super.call(
      "getUsdTicketFee",
      "getUsdTicketFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUsdTicketFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUsdTicketFee",
      "getUsdTicketFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserRewardsBalance(_user: Address): BigInt {
    let result = super.call(
      "getUserRewardsBalance",
      "getUserRewardsBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserRewardsBalance(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserRewardsBalance",
      "getUserRewardsBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWinningTicket(_lotteryNumber: BigInt): Array<BigInt> {
    let result = super.call(
      "getWinningTicket",
      "getWinningTicket(uint256):(uint256[4])",
      [ethereum.Value.fromUnsignedBigInt(_lotteryNumber)]
    );

    return result[0].toBigIntArray();
  }

  try_getWinningTicket(
    _lotteryNumber: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getWinningTicket",
      "getWinningTicket(uint256):(uint256[4])",
      [ethereum.Value.fromUnsignedBigInt(_lotteryNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isPlayerTicketAlreadyRevealed(
    _user: Address,
    _lotteryNumber: BigInt
  ): boolean {
    let result = super.call(
      "isPlayerTicketAlreadyRevealed",
      "isPlayerTicketAlreadyRevealed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_lotteryNumber)
      ]
    );

    return result[0].toBoolean();
  }

  try_isPlayerTicketAlreadyRevealed(
    _user: Address,
    _lotteryNumber: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPlayerTicketAlreadyRevealed",
      "isPlayerTicketAlreadyRevealed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_lotteryNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vrfCoordinatorV2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _gasLane(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _callbackGasLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _ethUsdPriceFeed(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _usdTicketFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _interval(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _prizeDistribution(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyTicketsCall extends ethereum.Call {
  get inputs(): BuyTicketsCall__Inputs {
    return new BuyTicketsCall__Inputs(this);
  }

  get outputs(): BuyTicketsCall__Outputs {
    return new BuyTicketsCall__Outputs(this);
  }
}

export class BuyTicketsCall__Inputs {
  _call: BuyTicketsCall;

  constructor(call: BuyTicketsCall) {
    this._call = call;
  }

  get _numberOfTickets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyTicketsCall__Outputs {
  _call: BuyTicketsCall;

  constructor(call: BuyTicketsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RevealWinningTicketsCall extends ethereum.Call {
  get inputs(): RevealWinningTicketsCall__Inputs {
    return new RevealWinningTicketsCall__Inputs(this);
  }

  get outputs(): RevealWinningTicketsCall__Outputs {
    return new RevealWinningTicketsCall__Outputs(this);
  }
}

export class RevealWinningTicketsCall__Inputs {
  _call: RevealWinningTicketsCall;

  constructor(call: RevealWinningTicketsCall) {
    this._call = call;
  }

  get _lotteryNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevealWinningTicketsCall__Outputs {
  _call: RevealWinningTicketsCall;

  constructor(call: RevealWinningTicketsCall) {
    this._call = call;
  }
}
